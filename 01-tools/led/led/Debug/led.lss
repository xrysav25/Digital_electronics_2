
led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000166  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009b1  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d7  00000000  00000000  00000c15  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000351  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001640  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039a  00000000  00000000  00001694  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000288  00000000  00000000  00001a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001cb6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  78:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <dot>:

int l_break(void)
{
    _delay_ms(LONG_DELAY);
    return 0;
}
  80:	95 b1       	in	r25, 0x05	; 5
  82:	80 e2       	ldi	r24, 0x20	; 32
  84:	98 27       	eor	r25, r24
  86:	95 b9       	out	0x05, r25	; 5
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	33 ec       	ldi	r19, 0xC3	; 195
  8c:	99 e0       	ldi	r25, 0x09	; 9
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	30 40       	sbci	r19, 0x00	; 0
  92:	90 40       	sbci	r25, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <dot+0xe>
  96:	00 c0       	rjmp	.+0      	; 0x98 <dot+0x18>
  98:	00 00       	nop
  9a:	95 b1       	in	r25, 0x05	; 5
  9c:	89 27       	eor	r24, r25
  9e:	85 b9       	out	0x05, r24	; 5
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	36 e1       	ldi	r19, 0x16	; 22
  a4:	81 e1       	ldi	r24, 0x11	; 17
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	30 40       	sbci	r19, 0x00	; 0
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <dot+0x26>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <dot+0x30>
  b0:	00 00       	nop
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	08 95       	ret

000000b8 <dash>:
  b8:	95 b1       	in	r25, 0x05	; 5
  ba:	80 e2       	ldi	r24, 0x20	; 32
  bc:	98 27       	eor	r25, r24
  be:	95 b9       	out	0x05, r25	; 5
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	33 ed       	ldi	r19, 0xD3	; 211
  c4:	90 e3       	ldi	r25, 0x30	; 48
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	30 40       	sbci	r19, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <dash+0xe>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <dash+0x18>
  d0:	00 00       	nop
  d2:	95 b1       	in	r25, 0x05	; 5
  d4:	89 27       	eor	r24, r25
  d6:	85 b9       	out	0x05, r24	; 5
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	36 e1       	ldi	r19, 0x16	; 22
  dc:	81 e1       	ldi	r24, 0x11	; 17
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	30 40       	sbci	r19, 0x00	; 0
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <dash+0x26>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <dash+0x30>
  e8:	00 00       	nop
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	08 95       	ret

000000f0 <main>:

int main(void)
{
    // Set pin as output in Data Direction Register
    // DDRB = DDRB or 0010 0000
    DDRB = DDRB | (1<<LED_GREEN);
  f0:	25 9a       	sbi	0x04, 5	; 4

    // Set pin LOW in Data Register (LED off)
    // PORTB = PORTB and 1101 1111
    PORTB = PORTB & ~(1<<LED_GREEN);
  f2:	2d 98       	cbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	2f ef       	ldi	r18, 0xFF	; 255
  f6:	87 ea       	ldi	r24, 0xA7	; 167
  f8:	91 e6       	ldi	r25, 0x61	; 97
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0xa>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x14>
 104:	00 00       	nop
    // Infinite loop
    while (1)
    {
        
        l_break();
        dash();
 106:	0e 94 5c 00 	call	0xb8	; 0xb8 <dash>
        dot();
 10a:	0e 94 40 00 	call	0x80	; 0x80 <dot>
        dot();
 10e:	0e 94 40 00 	call	0x80	; 0x80 <dot>
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	87 ea       	ldi	r24, 0xA7	; 167
 116:	91 e6       	ldi	r25, 0x61	; 97
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x28>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x32>
 122:	00 00       	nop
        l_break();
        dot();
 124:	0e 94 40 00 	call	0x80	; 0x80 <dot>
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	87 ea       	ldi	r24, 0xA7	; 167
 12c:	91 e6       	ldi	r25, 0x61	; 97
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0x3e>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x48>
 138:	00 00       	nop
        l_break();
        dot();
 13a:	0e 94 40 00 	call	0x80	; 0x80 <dot>
        dot();
 13e:	0e 94 40 00 	call	0x80	; 0x80 <dot>
        dash();
 142:	0e 94 5c 00 	call	0xb8	; 0xb8 <dash>
        dash();
 146:	0e 94 5c 00 	call	0xb8	; 0xb8 <dash>
        dash();
 14a:	0e 94 5c 00 	call	0xb8	; 0xb8 <dash>
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	87 ea       	ldi	r24, 0xA7	; 167
 152:	91 e6       	ldi	r25, 0x61	; 97
 154:	21 50       	subi	r18, 0x01	; 1
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <main+0x64>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0x6e>
 15e:	00 00       	nop
 160:	c9 cf       	rjmp	.-110    	; 0xf4 <main+0x4>

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
