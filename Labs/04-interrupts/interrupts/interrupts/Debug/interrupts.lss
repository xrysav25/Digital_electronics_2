
interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000218  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000028c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a0a  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f4  00000000  00000000  00000d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c5  00000000  00000000  00001472  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001838  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000414  00000000  00000000  00001938  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015d  00000000  00000000  00001d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001ea9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6d 00 	call	0xda	; 0xda <main>
  88:	0c 94 0a 01 	jmp	0x214	; 0x214 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  90:	fc 01       	movw	r30, r24
  92:	40 81       	ld	r20, Z
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <GPIO_config_output+0xe>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <GPIO_config_output+0xa>
  a2:	24 2b       	or	r18, r20
  a4:	20 83       	st	Z, r18
  a6:	08 95       	ret

000000a8 <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  a8:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  aa:	90 81       	ld	r25, Z
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <GPIO_write_low+0xe>
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <GPIO_write_low+0xa>
  ba:	20 95       	com	r18
  bc:	29 23       	and	r18, r25
  be:	20 83       	st	Z, r18
  c0:	08 95       	ret

000000c2 <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & (1<<pin_num);
  c2:	fc 01       	movw	r30, r24
  c4:	40 81       	ld	r20, Z
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <GPIO_write_high+0xe>
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <GPIO_write_high+0xa>
  d4:	24 23       	and	r18, r20
  d6:	20 83       	st	Z, r18
  d8:	08 95       	ret

000000da <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configuration of LED(s) at port B
    GPIO_config_output(&DDRB, LED_D1);
  da:	65 e0       	ldi	r22, 0x05	; 5
  dc:	84 e2       	ldi	r24, 0x24	; 36
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_write_low(&PORTB, LED_D1);
  e4:	65 e0       	ldi	r22, 0x05	; 5
  e6:	85 e2       	ldi	r24, 0x25	; 37
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>

    // Configuration of 16-bit Timer/Counter1 for LED blinking
    // Set the overflow prescaler to 262 ms and enable interrupt
    TIM1_overflow_262ms();
  ee:	e1 e8       	ldi	r30, 0x81	; 129
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	8b 7f       	andi	r24, 0xFB	; 251
  f6:	80 83       	st	Z, r24
  f8:	80 81       	ld	r24, Z
  fa:	83 60       	ori	r24, 0x03	; 3
  fc:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
  fe:	ef e6       	ldi	r30, 0x6F	; 111
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	81 60       	ori	r24, 0x01	; 1
 106:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 108:	78 94       	sei
 10a:	ff cf       	rjmp	.-2      	; 0x10a <main+0x30>

0000010c <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Toggle D1 LED on Multi-function shield.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	2f 93       	push	r18
 118:	3f 93       	push	r19
 11a:	4f 93       	push	r20
 11c:	5f 93       	push	r21
 11e:	6f 93       	push	r22
 120:	7f 93       	push	r23
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	af 93       	push	r26
 128:	bf 93       	push	r27
 12a:	ef 93       	push	r30
 12c:	ff 93       	push	r31
    // WRITE YOUR CODE HERE
	static uint8_t i=0;
	static uint8_t x=0;
	
	GPIO_write_high(&PORTB,LED_D1);
 12e:	65 e0       	ldi	r22, 0x05	; 5
 130:	85 e2       	ldi	r24, 0x25	; 37
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
	GPIO_write_high(&PORTB,LED_D2);
 138:	64 e0       	ldi	r22, 0x04	; 4
 13a:	85 e2       	ldi	r24, 0x25	; 37
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
	GPIO_write_high(&PORTB,LED_D3);
 142:	63 e0       	ldi	r22, 0x03	; 3
 144:	85 e2       	ldi	r24, 0x25	; 37
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
	GPIO_write_high(&PORTB,LED_D4);
 14c:	62 e0       	ldi	r22, 0x02	; 2
 14e:	85 e2       	ldi	r24, 0x25	; 37
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
	
	switch(i)
 156:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <i.1631>
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	99 f0       	breq	.+38     	; 0x184 <__vector_13+0x78>
 15e:	28 f0       	brcs	.+10     	; 0x16a <__vector_13+0x5e>
 160:	82 30       	cpi	r24, 0x02	; 2
 162:	29 f1       	breq	.+74     	; 0x1ae <__vector_13+0xa2>
 164:	83 30       	cpi	r24, 0x03	; 3
 166:	c1 f1       	breq	.+112    	; 0x1d8 <__vector_13+0xcc>
 168:	44 c0       	rjmp	.+136    	; 0x1f2 <__vector_13+0xe6>
	{
		case 0:
		GPIO_write_low(&PORTB,LED_D1);
 16a:	65 e0       	ldi	r22, 0x05	; 5
 16c:	85 e2       	ldi	r24, 0x25	; 37
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
		x = 0;
 174:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		i++;
 178:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <i.1631>
 17c:	8f 5f       	subi	r24, 0xFF	; 255
 17e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <i.1631>
		break;
 182:	37 c0       	rjmp	.+110    	; 0x1f2 <__vector_13+0xe6>
		
		case 1:
		GPIO_write_low(&PORTB,LED_D2);
 184:	64 e0       	ldi	r22, 0x04	; 4
 186:	85 e2       	ldi	r24, 0x25	; 37
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
		if(x == 0)
 18e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 192:	81 11       	cpse	r24, r1
 194:	06 c0       	rjmp	.+12     	; 0x1a2 <__vector_13+0x96>
		i++;
 196:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <i.1631>
 19a:	8f 5f       	subi	r24, 0xFF	; 255
 19c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <i.1631>
 1a0:	28 c0       	rjmp	.+80     	; 0x1f2 <__vector_13+0xe6>
		else i--;
 1a2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <i.1631>
 1a6:	81 50       	subi	r24, 0x01	; 1
 1a8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <i.1631>
 1ac:	22 c0       	rjmp	.+68     	; 0x1f2 <__vector_13+0xe6>
		break;
		
		case 2:
		GPIO_write_low(&PORTB,LED_D3);
 1ae:	63 e0       	ldi	r22, 0x03	; 3
 1b0:	85 e2       	ldi	r24, 0x25	; 37
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
		if(x == 0)
 1b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1bc:	81 11       	cpse	r24, r1
 1be:	06 c0       	rjmp	.+12     	; 0x1cc <__vector_13+0xc0>
		i++;
 1c0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <i.1631>
 1c4:	8f 5f       	subi	r24, 0xFF	; 255
 1c6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <i.1631>
 1ca:	13 c0       	rjmp	.+38     	; 0x1f2 <__vector_13+0xe6>
		else i--;
 1cc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <i.1631>
 1d0:	81 50       	subi	r24, 0x01	; 1
 1d2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <i.1631>
 1d6:	0d c0       	rjmp	.+26     	; 0x1f2 <__vector_13+0xe6>
		break;
		
		case 3:
		GPIO_write_low(&PORTB,LED_D4);
 1d8:	62 e0       	ldi	r22, 0x02	; 2
 1da:	85 e2       	ldi	r24, 0x25	; 37
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
		x = 1;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		i--;
 1e8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <i.1631>
 1ec:	81 50       	subi	r24, 0x01	; 1
 1ee:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <i.1631>
		break;
	}

 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	bf 91       	pop	r27
 1f8:	af 91       	pop	r26
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	7f 91       	pop	r23
 200:	6f 91       	pop	r22
 202:	5f 91       	pop	r21
 204:	4f 91       	pop	r20
 206:	3f 91       	pop	r19
 208:	2f 91       	pop	r18
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <_exit>:
 214:	f8 94       	cli

00000216 <__stop_program>:
 216:	ff cf       	rjmp	.-2      	; 0x216 <__stop_program>
