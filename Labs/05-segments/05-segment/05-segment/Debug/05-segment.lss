
05-segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d28  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080c  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c3  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  00001d44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000491  00000000  00000000  00001e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000330  00000000  00000000  000022dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000260d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_13>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <main>
  78:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  80:	fc 01       	movw	r30, r24
  82:	40 81       	ld	r20, Z
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <GPIO_config_output+0xe>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <GPIO_config_output+0xa>
  92:	24 2b       	or	r18, r20
  94:	20 83       	st	Z, r18
  96:	08 95       	ret

00000098 <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  98:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  9a:	90 81       	ld	r25, Z
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <GPIO_write_low+0xe>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <GPIO_write_low+0xa>
  aa:	20 95       	com	r18
  ac:	29 23       	and	r18, r25
  ae:	20 83       	st	Z, r18
  b0:	08 95       	ret

000000b2 <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);
  b2:	fc 01       	movw	r30, r24
  b4:	40 81       	ld	r20, Z
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <GPIO_write_high+0xe>
  bc:	22 0f       	add	r18, r18
  be:	33 1f       	adc	r19, r19
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <GPIO_write_high+0xa>
  c4:	24 2b       	or	r18, r20
  c6:	20 83       	st	Z, r18
  c8:	08 95       	ret

000000ca <SEG_init>:
 * Returns:  none
 **********************************************************************/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEG_LATCH);
  ca:	64 e0       	ldi	r22, 0x04	; 4
  cc:	8a e2       	ldi	r24, 0x2A	; 42
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
  d4:	67 e0       	ldi	r22, 0x07	; 7
  d6:	8a e2       	ldi	r24, 0x2A	; 42
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	84 e2       	ldi	r24, 0x24	; 36
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
  e8:	08 95       	ret

000000ea <SEG_update_shift_regs>:
 *           position - Position of the display where the segments are to - 1000 -> p3 aktivní
 *                      be displayed (p3 p2 p1 p0 xxxx, active high)
 * Returns:  none
 **********************************************************************/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	18 2f       	mov	r17, r24
  f2:	d6 2f       	mov	r29, r22
    uint8_t bit_number;

    // Pull LATCH, CLK, and DATA low
    GPIO_write_low(&PORTD, SEG_LATCH);
  f4:	64 e0       	ldi	r22, 0x04	; 4
  f6:	8b e2       	ldi	r24, 0x2B	; 43
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
    GPIO_write_low(&PORTD, SEG_CLK);
  fe:	67 e0       	ldi	r22, 0x07	; 7
 100:	8b e2       	ldi	r24, 0x2B	; 43
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
    GPIO_write_low(&PORTB, SEG_DATA);
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	85 e2       	ldi	r24, 0x25	; 37
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	85 e0       	ldi	r24, 0x05	; 5
 114:	8a 95       	dec	r24
 116:	f1 f7       	brne	.-4      	; 0x114 <SEG_update_shift_regs+0x2a>
 118:	00 00       	nop
 11a:	c8 e0       	ldi	r28, 0x08	; 8
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        // ...output DATA value
       
        if ((segments & 1) == 1)
 11c:	10 ff       	sbrs	r17, 0
 11e:	06 c0       	rjmp	.+12     	; 0x12c <SEG_update_shift_regs+0x42>
        {GPIO_write_high(&PORTB, SEG_DATA);}
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	85 e2       	ldi	r24, 0x25	; 37
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>
 12a:	05 c0       	rjmp	.+10     	; 0x136 <SEG_update_shift_regs+0x4c>
        else
        {GPIO_write_low(&PORTB, SEG_DATA);}
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	85 e2       	ldi	r24, 0x25	; 37
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
 136:	85 e0       	ldi	r24, 0x05	; 5
 138:	8a 95       	dec	r24
 13a:	f1 f7       	brne	.-4      	; 0x138 <SEG_update_shift_regs+0x4e>
 13c:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 13e:	67 e0       	ldi	r22, 0x07	; 7
 140:	8b e2       	ldi	r24, 0x2B	; 43
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>
 148:	85 e0       	ldi	r24, 0x05	; 5
 14a:	8a 95       	dec	r24
 14c:	f1 f7       	brne	.-4      	; 0x14a <SEG_update_shift_regs+0x60>
 14e:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 150:	67 e0       	ldi	r22, 0x07	; 7
 152:	8b e2       	ldi	r24, 0x2B	; 43
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
        // Shift "segments"
        segments = segments >> 1; //shifting register
 15a:	16 95       	lsr	r17
 15c:	c1 50       	subi	r28, 0x01	; 1
    GPIO_write_low(&PORTB, SEG_DATA);
    // Wait 1 us
    _delay_us(1);
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 15e:	f1 f6       	brne	.-68     	; 0x11c <SEG_update_shift_regs+0x32>
 160:	c8 e0       	ldi	r28, 0x08	; 8
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "position" by & (faster) or % (slower) and... 
        // ...output DATA value
        if ((position & 1) == 1)
 162:	d0 ff       	sbrs	r29, 0
 164:	06 c0       	rjmp	.+12     	; 0x172 <SEG_update_shift_regs+0x88>
        {GPIO_write_high(&PORTB, SEG_DATA);}
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	85 e2       	ldi	r24, 0x25	; 37
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>
 170:	05 c0       	rjmp	.+10     	; 0x17c <SEG_update_shift_regs+0x92>
        else
        {GPIO_write_low(&PORTB, SEG_DATA);}
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	85 e2       	ldi	r24, 0x25	; 37
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
 17c:	85 e0       	ldi	r24, 0x05	; 5
 17e:	8a 95       	dec	r24
 180:	f1 f7       	brne	.-4      	; 0x17e <SEG_update_shift_regs+0x94>
 182:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 184:	67 e0       	ldi	r22, 0x07	; 7
 186:	8b e2       	ldi	r24, 0x2B	; 43
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>
 18e:	85 e0       	ldi	r24, 0x05	; 5
 190:	8a 95       	dec	r24
 192:	f1 f7       	brne	.-4      	; 0x190 <SEG_update_shift_regs+0xa6>
 194:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 196:	67 e0       	ldi	r22, 0x07	; 7
 198:	8b e2       	ldi	r24, 0x2B	; 43
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
        // Shift "position"
        position = position >> 1;       
 1a0:	d6 95       	lsr	r29
 1a2:	c1 50       	subi	r28, 0x01	; 1
        segments = segments >> 1; //shifting register
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 1a4:	f1 f6       	brne	.-68     	; 0x162 <SEG_update_shift_regs+0x78>
        // Shift "position"
        position = position >> 1;       
    }

    // Pull LATCH high
    GPIO_write_high(&PORTD, SEG_LATCH);
 1a6:	64 e0       	ldi	r22, 0x04	; 4
 1a8:	8b e2       	ldi	r24, 0x2B	; 43
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>
 1b0:	85 e0       	ldi	r24, 0x05	; 5
 1b2:	8a 95       	dec	r24
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <SEG_update_shift_regs+0xc8>
 1b6:	00 00       	nop
    // Wait 1 us
    _delay_us(1);
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	08 95       	ret

000001c0 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configure SSD signals
    SEG_init();
 1c0:	0e 94 65 00 	call	0xca	; 0xca <SEG_init>
        break;
        case 4:
        SEG_update_shift_regs(0b10011001, 0b00100000);
        break;
        case 5:
        SEG_update_shift_regs(0b01001001, 0b00100000);
 1c4:	60 e2       	ldi	r22, 0x20	; 32
 1c6:	89 e4       	ldi	r24, 0x49	; 73
 1c8:	0e 94 75 00 	call	0xea	; 0xea <SEG_update_shift_regs>
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <main+0xc>

000001ce <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Increment decimal counter value and display it on SSD.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
    // WRITE YOUR CODE HERE

 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
