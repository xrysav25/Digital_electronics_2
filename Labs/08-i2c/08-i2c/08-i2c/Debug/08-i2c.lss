
08-i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000346  000003da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000346  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  0080012a  0080012a  00000404  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c3b  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086d  00000000  00000000  0000116f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000064d  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  0000202c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000504  00000000  00000000  00002210  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004c3  00000000  00000000  00002714  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002bd7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 0c 01 	jmp	0x218	; 0x218 <__vector_18>
  4c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e4       	ldi	r30, 0x46	; 70
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 36       	cpi	r26, 0x6F	; 111
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 a1 01 	jmp	0x342	; 0x342 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
  a6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 64 01 	call	0x2c8	; 0x2c8 <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_33ms();
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8a 7f       	andi	r24, 0xFA	; 250
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
  c2:	ef e6       	ldi	r30, 0x6F	; 111
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
  cc:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("\r\nScan I2C-bus for devices:\r\n");
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 92 01 	call	0x324	; 0x324 <uart_puts>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x30>

000000d8 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	1f 93       	push	r17
  e4:	2f 93       	push	r18
  e6:	3f 93       	push	r19
  e8:	4f 93       	push	r20
  ea:	5f 93       	push	r21
  ec:	6f 93       	push	r22
  ee:	7f 93       	push	r23
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	af 93       	push	r26
  f6:	bf 93       	push	r27
  f8:	ef 93       	push	r30
  fa:	ff 93       	push	r31
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	00 d0       	rcall	.+0      	; 0x102 <__vector_13+0x2a>
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
    static state_t state = STATE_IDLE;  // Current state of the FSM
    static uint8_t addr = 7;            // I2C slave address
    uint8_t result = 1;                 // ACK result from the bus
    char uart_string[2] = "00"; // String for converting numbers by itoa()
 106:	80 e3       	ldi	r24, 0x30	; 48
 108:	90 e3       	ldi	r25, 0x30	; 48
 10a:	9a 83       	std	Y+2, r25	; 0x02
 10c:	89 83       	std	Y+1, r24	; 0x01

    // FSM
    switch (state)
 10e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state.1964>
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	a9 f0       	breq	.+42     	; 0x140 <__vector_13+0x68>
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	29 f1       	breq	.+74     	; 0x164 <__vector_13+0x8c>
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	99 f5       	brne	.+102    	; 0x184 <__vector_13+0xac>
    {
    // Increment I2C slave address
    case STATE_IDLE:
        addr++;
 11e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	98 0f       	add	r25, r24
 126:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
        // If slave address is between 8 and 119 then move to SEND state
        if (addr>7 && addr<120){
 12a:	87 50       	subi	r24, 0x07	; 7
 12c:	80 37       	cpi	r24, 0x70	; 112
 12e:	20 f4       	brcc	.+8      	; 0x138 <__vector_13+0x60>
            state = STATE_SEND;
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 136:	29 c0       	rjmp	.+82     	; 0x18a <__vector_13+0xb2>
        }
        else{
            addr = 7;
 138:	87 e0       	ldi	r24, 0x07	; 7
 13a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 13e:	25 c0       	rjmp	.+74     	; 0x18a <__vector_13+0xb2>
        // |      from Master       | from Slave |
        // +------------------------+------------+
        // | 7  6  5  4  3  2  1  0 |     ACK    |
        // |a6 a5 a4 a3 a2 a1 a0 R/W|   result   |
        // +------------------------+------------+
        result = twi_start((addr<<1) + TWI_WRITE);
 140:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 144:	88 0f       	add	r24, r24
 146:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <twi_start>
 14a:	18 2f       	mov	r17, r24
        twi_stop();
 14c:	0e 94 08 01 	call	0x210	; 0x210 <twi_stop>
        /* Test result from I2C bus. If it is 0 then move to ACK state, 
         * otherwise move to IDLE */
        if (result == 0){
 150:	11 11       	cpse	r17, r1
 152:	04 c0       	rjmp	.+8      	; 0x15c <__vector_13+0x84>
            state = STATE_ACK;
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 15a:	17 c0       	rjmp	.+46     	; 0x18a <__vector_13+0xb2>
        }
        else{
            state = STATE_IDLE;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 162:	13 c0       	rjmp	.+38     	; 0x18a <__vector_13+0xb2>
        break;

    // A module connected to the bus was found
    case STATE_ACK:
        // Send info about active I2C slave to UART and move to IDLE
        uart_puts("Addr:");
 164:	80 e2       	ldi	r24, 0x20	; 32
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	0e 94 92 01 	call	0x324	; 0x324 <uart_puts>
        //itoa(addr, uart_string, 16);
        uart_puts(uart_string);
 16c:	ce 01       	movw	r24, r28
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	0e 94 92 01 	call	0x324	; 0x324 <uart_puts>
        uart_puts("/n");
 174:	86 e2       	ldi	r24, 0x26	; 38
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	0e 94 92 01 	call	0x324	; 0x324 <uart_puts>
        state = STATE_IDLE;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
        break;
 182:	03 c0       	rjmp	.+6      	; 0x18a <__vector_13+0xb2>

    // If something unexpected happens then move to IDLE
    default:
        state = STATE_IDLE;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
        break;
    }
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	ff 91       	pop	r31
 194:	ef 91       	pop	r30
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	7f 91       	pop	r23
 1a0:	6f 91       	pop	r22
 1a2:	5f 91       	pop	r21
 1a4:	4f 91       	pop	r20
 1a6:	3f 91       	pop	r19
 1a8:	2f 91       	pop	r18
 1aa:	1f 91       	pop	r17
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
 1b6:	87 b1       	in	r24, 0x07	; 7
 1b8:	8f 7c       	andi	r24, 0xCF	; 207
 1ba:	87 b9       	out	0x07, r24	; 7
 1bc:	88 b1       	in	r24, 0x08	; 8
 1be:	80 63       	ori	r24, 0x30	; 48
 1c0:	88 b9       	out	0x08, r24	; 8
 1c2:	e9 eb       	ldi	r30, 0xB9	; 185
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	8c 7f       	andi	r24, 0xFC	; 252
 1ca:	80 83       	st	Z, r24
 1cc:	88 e9       	ldi	r24, 0x98	; 152
 1ce:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 1d2:	08 95       	ret

000001d4 <twi_start>:
 1d4:	94 ea       	ldi	r25, 0xA4	; 164
 1d6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1da:	ec eb       	ldi	r30, 0xBC	; 188
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	90 81       	ld	r25, Z
 1e0:	99 23       	and	r25, r25
 1e2:	ec f7       	brge	.-6      	; 0x1de <twi_start+0xa>
 1e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 1e8:	84 e8       	ldi	r24, 0x84	; 132
 1ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1ee:	ec eb       	ldi	r30, 0xBC	; 188
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	88 23       	and	r24, r24
 1f6:	ec f7       	brge	.-6      	; 0x1f2 <twi_start+0x1e>
 1f8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 1fc:	98 7f       	andi	r25, 0xF8	; 248
 1fe:	98 31       	cpi	r25, 0x18	; 24
 200:	29 f0       	breq	.+10     	; 0x20c <twi_start+0x38>
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 34       	cpi	r25, 0x40	; 64
 206:	19 f4       	brne	.+6      	; 0x20e <twi_start+0x3a>
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	08 95       	ret
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	08 95       	ret

00000210 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 210:	84 e9       	ldi	r24, 0x94	; 148
 212:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 216:	08 95       	ret

00000218 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 218:	1f 92       	push	r1
 21a:	0f 92       	push	r0
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	0f 92       	push	r0
 220:	11 24       	eor	r1, r1
 222:	2f 93       	push	r18
 224:	8f 93       	push	r24
 226:	9f 93       	push	r25
 228:	ef 93       	push	r30
 22a:	ff 93       	push	r31
 22c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 230:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 234:	8c 71       	andi	r24, 0x1C	; 28
 236:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <UART_RxHead>
 23a:	ef 5f       	subi	r30, 0xFF	; 255
 23c:	ef 71       	andi	r30, 0x1F	; 31
 23e:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <UART_RxTail>
 242:	e9 17       	cp	r30, r25
 244:	39 f0       	breq	.+14     	; 0x254 <__vector_18+0x3c>
 246:	e0 93 2c 01 	sts	0x012C, r30	; 0x80012c <UART_RxHead>
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	e1 5d       	subi	r30, 0xD1	; 209
 24e:	fe 4f       	sbci	r31, 0xFE	; 254
 250:	20 83       	st	Z, r18
 252:	01 c0       	rjmp	.+2      	; 0x256 <__vector_18+0x3e>
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <__data_end>
 25a:	89 2b       	or	r24, r25
 25c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
 260:	ff 91       	pop	r31
 262:	ef 91       	pop	r30
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	2f 91       	pop	r18
 26a:	0f 90       	pop	r0
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	0f 90       	pop	r0
 270:	1f 90       	pop	r1
 272:	18 95       	reti

00000274 <__vector_19>:
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
 27e:	8f 93       	push	r24
 280:	9f 93       	push	r25
 282:	ef 93       	push	r30
 284:	ff 93       	push	r31
 286:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <UART_TxHead>
 28a:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <UART_TxTail>
 28e:	98 17       	cp	r25, r24
 290:	69 f0       	breq	.+26     	; 0x2ac <__vector_19+0x38>
 292:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <UART_TxTail>
 296:	ef 5f       	subi	r30, 0xFF	; 255
 298:	ef 71       	andi	r30, 0x1F	; 31
 29a:	e0 93 2d 01 	sts	0x012D, r30	; 0x80012d <UART_TxTail>
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	e1 5b       	subi	r30, 0xB1	; 177
 2a2:	fe 4f       	sbci	r31, 0xFE	; 254
 2a4:	80 81       	ld	r24, Z
 2a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <__vector_19+0x42>
 2ac:	e1 ec       	ldi	r30, 0xC1	; 193
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	8f 7d       	andi	r24, 0xDF	; 223
 2b4:	80 83       	st	Z, r24
 2b6:	ff 91       	pop	r31
 2b8:	ef 91       	pop	r30
 2ba:	9f 91       	pop	r25
 2bc:	8f 91       	pop	r24
 2be:	0f 90       	pop	r0
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	0f 90       	pop	r0
 2c4:	1f 90       	pop	r1
 2c6:	18 95       	reti

000002c8 <uart_init>:
 2c8:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <UART_TxHead>
 2cc:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <UART_TxTail>
 2d0:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <UART_RxHead>
 2d4:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <UART_RxTail>
 2d8:	99 23       	and	r25, r25
 2da:	1c f4       	brge	.+6      	; 0x2e2 <uart_init+0x1a>
 2dc:	22 e0       	ldi	r18, 0x02	; 2
 2de:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 2e2:	90 78       	andi	r25, 0x80	; 128
 2e4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 2e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 2ec:	88 e9       	ldi	r24, 0x98	; 152
 2ee:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 2f2:	86 e0       	ldi	r24, 0x06	; 6
 2f4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 2f8:	08 95       	ret

000002fa <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 2fa:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <UART_TxHead>
 2fe:	2f 5f       	subi	r18, 0xFF	; 255
 300:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 302:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <UART_TxTail>
 306:	29 17       	cp	r18, r25
 308:	e1 f3       	breq	.-8      	; 0x302 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 30a:	e2 2f       	mov	r30, r18
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	e1 5b       	subi	r30, 0xB1	; 177
 310:	fe 4f       	sbci	r31, 0xFE	; 254
 312:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 314:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 318:	e1 ec       	ldi	r30, 0xC1	; 193
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	80 62       	ori	r24, 0x20	; 32
 320:	80 83       	st	Z, r24
 322:	08 95       	ret

00000324 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	ec 01       	movw	r28, r24
    while (*s)
 32a:	88 81       	ld	r24, Y
 32c:	88 23       	and	r24, r24
 32e:	31 f0       	breq	.+12     	; 0x33c <uart_puts+0x18>
 330:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 332:	0e 94 7d 01 	call	0x2fa	; 0x2fa <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 336:	89 91       	ld	r24, Y+
 338:	81 11       	cpse	r24, r1
 33a:	fb cf       	rjmp	.-10     	; 0x332 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	08 95       	ret

00000342 <_exit>:
 342:	f8 94       	cli

00000344 <__stop_program>:
 344:	ff cf       	rjmp	.-2      	; 0x344 <__stop_program>
